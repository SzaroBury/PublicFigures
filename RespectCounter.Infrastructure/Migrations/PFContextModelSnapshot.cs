// <auto-generated />
using System;
using EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFContext.Migrations
{
    [DbContext(typeof(PFContext))]
    partial class PFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Model.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Happend")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsQuote")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("PersonId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3804),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "",
                            Happend = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsQuote = true,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3806),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            Source = "Dude, just trust me",
                            Value = "Milik jest słaby",
                            Verified = false
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3814),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Można utknąć w eeeee korku",
                            Happend = new DateTime(2010, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsQuote = false,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3816),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 2,
                            Source = "https://www.youtube.com/watch?v=qbYMoKxif6I",
                            Value = "Monaco GP 2010: Robeeeeeeeert Kubica P2 in Quali",
                            Verified = true
                        });
                });

            modelBuilder.Entity("Entities.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("PersonId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Najlepszy zawodnik!",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3840),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3842),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "No nie wiem. Milik lepszy!",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3849),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3851),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Jest całkiem dobry faktycznie",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3856),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3857),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 1,
                            Content = "Fajność!",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3863),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3864),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Zgadza się!",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3869),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3871),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 1,
                            Content = "Niefajność",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3877),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3878),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb"
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 2,
                            Content = "Lepsza weeeeeersja: https://www.youtube.com/watch?v=vmLonweq6wA",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3883),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3885),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Bardzo memiczna osoba",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3983),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3985),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 3
                        },
                        new
                        {
                            Id = 9,
                            Content = "Hańba!",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3990),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3992),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ParentId = 8
                        },
                        new
                        {
                            Id = 10,
                            Content = "Chyba ty",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3998),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4000),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ParentId = 8
                        },
                        new
                        {
                            Id = 11,
                            Content = "Ja tam mu nei ufam",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4005),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4006),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "Nie lubiem go, bo Andrzej to dziwne imię",
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4011),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4013),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 3
                        });
                });

            modelBuilder.Entity("Entities.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PublicScore")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1988, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3647),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            DeathDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test desc",
                            FirstName = "Robert",
                            LastName = "Lewandowski",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3650),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Nationality = "Polish",
                            PublicScore = 5f
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1984, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3659),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            DeathDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test desc",
                            FirstName = "Robert",
                            LastName = "Kubica",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3661),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Nationality = "Polish",
                            PublicScore = 5f
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(1972, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3666),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            DeathDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test desc",
                            FirstName = "Andrzej",
                            LastName = "Duda",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3668),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Nationality = "Polish",
                            PublicScore = 5f
                        },
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(1957, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3674),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            DeathDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test desc",
                            FirstName = "Donald",
                            LastName = "Tusk",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3675),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Nationality = "Polish",
                            PublicScore = 5f
                        });
                });

            modelBuilder.Entity("Entities.Model.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("PersonId");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4040),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4042),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            ReactionType = 0
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4047),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4049),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            ReactionType = 2
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4054),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4055),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            ReactionType = 1
                        },
                        new
                        {
                            Id = 11,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4060),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4061),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            ReactionType = 3
                        },
                        new
                        {
                            Id = 12,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4066),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4068),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            ReactionType = 4
                        },
                        new
                        {
                            Id = 13,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4073),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4075),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            ReactionType = 4
                        },
                        new
                        {
                            Id = 14,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4080),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4081),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            ReactionType = 4
                        },
                        new
                        {
                            Id = 15,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4086),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4087),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            PersonId = 1,
                            ReactionType = 4
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 1,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4092),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4094),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ReactionType = 3
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 1,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4099),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4101),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ReactionType = 2
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 1,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4106),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4107),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ReactionType = 3
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 1,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4112),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4113),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ReactionType = 4
                        },
                        new
                        {
                            Id = 3,
                            CommentId = 4,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4118),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4120),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ReactionType = 4
                        },
                        new
                        {
                            Id = 1,
                            CommentId = 5,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4124),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4126),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ReactionType = 3
                        },
                        new
                        {
                            Id = 2,
                            CommentId = 5,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4131),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(4132),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            ReactionType = 4
                        });
                });

            modelBuilder.Entity("Entities.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMainTag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3715),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Test desc",
                            IsMainTag = true,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3717),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3724),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Test desc",
                            IsMainTag = false,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3725),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Name = "Football"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3730),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Test desc",
                            IsMainTag = false,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3732),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Name = "FC Barcelona"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3737),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Test desc",
                            IsMainTag = false,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3738),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Name = "F1"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3743),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Test desc",
                            IsMainTag = false,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3745),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Name = "WEC"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3759),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Test desc",
                            IsMainTag = true,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3761),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Name = "Politics"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3766),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Test desc",
                            IsMainTag = false,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3767),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Name = "PiS"
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3772),
                            CreatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Description = "Test desc",
                            IsMainTag = false,
                            LastUpdated = new DateTime(2023, 7, 11, 23, 44, 13, 809, DateTimeKind.Local).AddTicks(3774),
                            LastUpdatedById = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            Name = "PO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "47b57377-8a22-4cff-b4db-b5e0860de74d",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "010f8164-7f43-4d1a-aee3-7097b4b53c27",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44fcb463-9459-4138-bc54-a2b82dbbde43",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFec0Qo/0M7ej5Fr5DNKsYMk4YF7QBrqxuTDb+WHS9SW1LysNhf2hYX5s4DpGuKGvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "033ae3be-6a6d-405c-bf01-5f8f84665674",
                            TwoFactorEnabled = false,
                            UserName = "sys"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d6dfd01e-c1be-4dbf-a899-e00e64598ccb",
                            RoleId = "47b57377-8a22-4cff-b4db-b5e0860de74d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersonTag", b =>
                {
                    b.Property<int>("PersonsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("PersonsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PersonTag");
                });

            modelBuilder.Entity("Entities.Model.Activity", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Model.Person", "Person")
                        .WithMany("Activities")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.Model.Comment", b =>
                {
                    b.HasOne("Entities.Model.Activity", "Activity")
                        .WithMany("Comments")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Model.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Entities.Model.Person", "Person")
                        .WithMany("Comments")
                        .HasForeignKey("PersonId");

                    b.Navigation("Activity");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Parent");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.Model.Person", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Entities.Model.Reaction", b =>
                {
                    b.HasOne("Entities.Model.Activity", "Activity")
                        .WithMany("Reactions")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Entities.Model.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Model.Person", "Person")
                        .WithMany("Reactions")
                        .HasForeignKey("PersonId");

                    b.Navigation("Activity");

                    b.Navigation("Comment");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.Model.Tag", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonTag", b =>
                {
                    b.HasOne("Entities.Model.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Model.Activity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Entities.Model.Comment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Entities.Model.Person", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
